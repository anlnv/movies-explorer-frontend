import { useEffect, useState } from 'react';
import { MOVIES_CONFIG } from '../utils/config';
import { LOCAL_STORAGE_KEYS } from '../utils/vars.global';

export const useSearch = ({ movies, setPage, isMoviesPage, isSavedMoviesPage }) => {
  const [ filteredMovies, setFilteredMovies ] = useState([]);
  const [ isSearchLoading, setSearchLoading ] = useState(false);
  const [ query, setQuery ] = useState({
    string: '',
    isShort: false,
    data: [],
  });
  const [ searchError, setSearchError ] = useState('');
  const regexForFilter = /[¬´¬ª!@#$%^&*()_\-=+|\[\]:"‚Ññ;?{}<>.,]/g;
  const searchStatuses = {
    nothing: '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ... üëÄ',
    emptySavedMovieList: '–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ Ôø£\\_(„ÉÑ)_/Ôø£',
    emptyLocalStorage: '–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–æ–≤'
  };

  useEffect(() => {
    // –∑–∞–ø–æ–ª–Ω—è–µ–º –∫–≤–µ—Ä–∏ –∏ —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞
    if (LOCAL_STORAGE_KEYS.SEARCH in localStorage && isMoviesPage) {
      const searchHistory = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEYS.SEARCH));
      setQuery({
        string: searchHistory.string,
        isShort: searchHistory.isShort,
        data: searchHistory.data
      });
      setFilteredMovies(searchHistory.data);
    } else if (!localStorage.getItem(LOCAL_STORAGE_KEYS.SEARCH && isMoviesPage)) {
      setSearchError(searchStatuses.emptyLocalStorage);
    }
  }, [ isMoviesPage ]);

  useEffect(() => {
    if (isSavedMoviesPage) {
      setSearchError('');
      const newFilteredMovies = filterMovies(movies, query);
      setFilteredMovies(newFilteredMovies);
      if (newFilteredMovies.length === 0) {
        setSearchError(searchStatuses.nothing);
      }
      if (movies.length === 0) {
        setSearchError(searchStatuses.emptySavedMovieList);
      }
    }
  }, [ isSavedMoviesPage, movies ]);

  const convertString = (str) => {
    return str.trim().toUpperCase().replace(regexForFilter, '');
  };

  const filterMovies = (arr, query) => {
    if (query.isShort) {
      return arr
        .filter(movie => movie.duration <= MOVIES_CONFIG.SHORT_FILMS) // filter short films
        .filter(m => convertString(m.nameRU || m.nameEN).includes(convertString(query.string))); // filter film title with converted strings
    } else {
      return arr.filter(m => convertString(m.nameRU || m.nameEN).includes(convertString(query.string))); // filter film title with converted strings
    }
  };

  const handleSearch = (arr, query) => {
    // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    setSearchError('');
    // –≤–∫–ª—é—á–∞–µ–º –ª–æ—É–¥–µ—Ä
    setSearchLoading(true);
    // –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∫–≤–µ—Ä–∏-–∑–∞–ø—Ä–æ—Å–æ–º
    const newData = filterMovies(arr, query);
    // –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–∏—Å–∫–∞
    setTimeout(() => {
      // –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç, –∑–∞–ø–∏—à–µ–º –æ—à–∏–±–∫—É
      if (newData.length === 0) {
        setSearchError(searchStatuses.nothing);
      }
      // –∑–∞–ø–∏—à–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
      setFilteredMovies(newData);
      // –≤—ã–∫–ª—é—á–∏–º –ª–æ—É–¥–µ—Ä
      setSearchLoading(false);
    }, 200);
    // –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–∏—Ç-—Ñ–∏–ª—å–º–æ–≤, —Ç–æ —Å–±—Ä–æ—Å–∏–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ –∑–∞–ø–∏—à–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–æ—Ä–µ–π–¥–∂
    if (isMoviesPage) {
      setPage(0);
      localStorage.setItem(LOCAL_STORAGE_KEYS.SEARCH, JSON.stringify({
        string: query.string,   // —Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞
        isShort: query.isShort, // —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞
        data: newData,          // –º–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
      }));
    }
  };

  return {
    filteredMovies,
    query,
    setQuery,
    isSearchLoading,
    searchError,
    handleSearch,
  };
};
